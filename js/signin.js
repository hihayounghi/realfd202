/// 회원가입 페이지 JS - member.js /////

$(function () { /// jQB //////////////////

    /////////////////////////////////////////////////
    /////// 가입하기(submit) 버튼 클릭시 ///////////////
    /////////////////////////////////////////////////
    // 전체검사의 원리 :
    // 전역변수 pass 를 설정하여 true를 주고
    // 검사중간에 문제가 생기면 false로 변경하여
    // 유효성검사 통과여부를 판단한다!
    //////////////////////////////////////////////////////
    // 전체검사의 방법 : 기존 blur 이벤트나 change, keyup
    // 이벤트등을 강제로 발생하여 전체검사를 실행한다!
    // 기존의 검사루트를 그래로 활용한다!(별도검사코드 만들지않음!)
    ///////////////////////////////////////////////////////

    // 검사용변수
    let pass;

    // 이벤트 대상: #btn_signin
    $("#btn_signin").click(function (e) { // e-이벤트전달변수

        // 1. 서브밋 페이지 전송막기
        e.preventDefault();

        // 2. pass 통과여부변수에 true 설정하기
        pass = true;

        // 3. 입력창 blur 이벤트 발생시키기(전체검사)
        // 대상: input[type=text][id!=email2],input[type=password]
        // 방법: trigger 메서드로 대상요소에 blur이벤트를 강제발생시킴!
        // 주의사항: 검사대상에서 숨겨놓은 email2를 반드시 뺌
        // 항목제외 -> [id!=email2]
        // $("input[type=text][id!=email2],input[type=password]")
        //     .trigger("blur");

        // // 4. 이메일 검사를 위해 선택박스에 change 이벤트 발생시키기
        // seleml.trigger("change");

        // // 5. 이메일 직접입력일때와 아닐때를 구분하여 keyup 이벤트 발생시키기

        // //직접입력일때는 뒷주소에 발생!
        // if (seleml.val() === "free")
        //     eml2.trigger("keyup");
        // //직접입력이 아닐때는 앞주소에 발생!
        // else
        //     eml1.trigger("keyup");

        console.log("통과여부:" + pass);

        ///////////////////////////////////
        //// 이메일 검사결과 메시지 찍기 //////
        if (pass) { // 통과시 ////

            console.log("후.....");
            // 원래는 PHP DB입력 처리 페이지로 가야함!
            //$("#mform").submit();
            // submit() 메서드
            // form요소의 action 설정 페이지로 데이터전송
            // 방식은 method에 지정된 post방식으로 넘어감

            // 직접 처리페이지로 가지 않고
            // 비동기적으로 처리할 수 있다!!!
            // 그게 바로~~~~ AJAX!

            /*/////////////////////////////////////////
            [ AJAX = Asynchronous JavaScript and XML. ]
            - 비동기통신이란? 쉽게 말해서 페이지가 새로 
            고쳐지지 않고 (처리페이지로 직접 이동하지 않고)
            페이지간 데이터처리를 할 수 있는 통신방법을 말함
            - 제이쿼리로 POST방식처리를 AJAX를 이용함!
            
            - POST방식 처리 메서드:
            $.post(URL,data,callback);
            
            $.post(
                1.전송할 페이지주소,
                2.전송할 데이터,
                3.전송후 실행함수
            );
            
            */ ////////////////////////////////////////
            $.post(
                //1.전송할 페이지주소
                "process/ins.php",
                //2.전송할 데이터(객체형식으로!)
                {
                    "account": $("#account").val(), //아이디
                    "password": $("#password").val(), //비번
                    "user_name": $("#user_name").val(), //이름
                    "sex": //성별
                        $(":radio[name=sex]:checked").val(),
                    "email": $("#email").val() 
                },
                //3.전송후 실행함수
                function (res) { //res - 결과값
                    
                    // res는 처리페이지에서 찍어주는 값이
                    // 넘어온다!(echo로 찍은 값이 res에 담긴다)
                    alert(res); 
                    document.write(res);
                    // 가입축하 메시지
                    if(res === "ok") {

                        alert("회원가입을 축하드립니다!");

                        // 로그인 페이지로 이동
                        location.replace("login.php");

                    } //// if ///////////////////////////////
                    else {
                        alert("회원가입에 실패하였습니다.관리자에게 문의해 주세요! 실패이유:" + res);
                    } ////// else /////////////////////////

                } //// 콜백함수 ///////

            ); /////// ajax : post /////////////////////
            ///////////////////////////////////////////


            // 지금은 바로 로그인 페이지로 감!

            // 가입축하 메시지
            //alert("회원가입을 축하드립니다~!! 짝짝짝!!!");

            // 로그인 페이지로 이동
            //location.href = "login.html";
            //location.replace("login.html");
            /*
                location.href 는 이전 페이지로 돌아갈 수 있다
                그런데 민감한 데이터를 입력 후 이전 페이지로 가게 되면
                비밀번호는 리셋되었지만 나머지정보를 다시 볼 수 있다!
                이런 경우 location.replace(이동할주소페이지)를 사용하면
                이전페이지로 갈 수 없다!
            */

        } ///////// if ////////////////
        else { // 불통과시

            alert("입력을 수정하세요.");

        } ///////// else ////////////////



    }); /////////////// click //////////////////////








}); ////////// jQB //////////////////////





/*//////////////////////////////////////////////
    함수명: groSpace (get rid of space)
    기능: 문자의 모든 공백을 제거하여 리턴함
*/ //////////////////////////////////////////////
function groSpace(val) { // val - 전달변수(처리할값)
    // 정규식 문법 - 슬래쉬 사이에 표현
    // \s - 스페이스를 의미, g - 전역플래그(모두찾음)
    // 역슬래쉬는 엔터키 위에 우리나라돈 원문자를 누름!
    // new value 새로운값
    let newval = val.replace(/\s/g, "");
    // 넘어온 문자값에서 스페이스를 모두 찾아 없애라!

    // 호출한 곳으로 값을 가지고 돌아가라!
    return newval;

} ////// groSpace 함수 /////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

/*////////////////////////////////////////
    함수명:validReg
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말자!-싸면 문자가됨)
*/ ////////////////////////////////////////
function validReg(val, cid) {
    // val - 검사할 값, cid - 처리구분아이디
    //console.log(val+"/"+cid);

    // 정규식 변수
    let reg;

    switch (cid) {
        case "account": //아이디
            reg = /^[a-z0-9]{6,10}$/g;
            //아이디는 6~10자 영문자 또는 숫자
            break;
        case "password": //비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=\*]).*$/;
            //특수문자,문자,숫자 포함 형태의 5~15자리 이내의 암호 정규식
            // 특수문자중 \* (역슬래쉬별)은 특수문자처리임
            // *은 모든이라는 뜻으로사용되기때문!
            break;
        case "email": //이메일
            reg = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            break;

    } ///// switch case문 ///////

    //console.log("정규식:"+reg);
    // 검사결과 리턴
    // test(값) 값을 검사하여 
    // true/false 리턴하는 JS내장함수
    return reg.test(val);

} ///////////// validReg 함수 //////////////
//////////////////////////////////////////
//////////////////////////////////////////